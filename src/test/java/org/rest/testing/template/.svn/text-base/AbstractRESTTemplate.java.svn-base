package org.rest.testing.template;

import org.apache.http.HttpHeaders;
import org.rest.common.IEntity;
import org.rest.common.util.HttpConstants;
import org.rest.model.Privilege;
import org.rest.model.User;
import org.rest.testing.ExamplePaths;
import org.rest.testing.ITemplate;
import org.rest.testing.security.SecurityComponent;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.base.Preconditions;
import com.jayway.restassured.response.Response;
import com.thoughtworks.xstream.XStream;

/**
 * Template for the consumption of the REST API <br>
 */
public abstract class AbstractRESTTemplate< T extends IEntity > implements ITemplate< T >{
	
	@Autowired
	ExamplePaths paths;
	
	@Autowired
	SecurityComponent securityComponent;
	
	@Autowired
	GenericRESTTemplate genericRestTemplate;
	
	private XStream xstream;
	
	public AbstractRESTTemplate(){
		super();
		
		this.xstream = new XStream();
		this.xstream.processAnnotations( User.class );
		this.xstream.processAnnotations( Privilege.class );
		this.xstream.autodetectAnnotations( true );
	}
	
	// create
	
	@Override
	public final String createResource(){
		return this.createResource( this.createNewEntity() );
	}
	
	@Override
	public final String createResource( final T resource ){
		Preconditions.checkNotNull( resource );
		
		final XStream xStream = new XStream();
		xStream.autodetectAnnotations( true );
		
		final String resourceAsXML = xStream.toXML( resource );
		final Response response = this.securityComponent.givenAuthenticatedByBasicAuth().contentType( HttpConstants.MIME_XML ).body( resourceAsXML ).post( this.getUri() );
		
		final String locationOfCreatedResource = response.getHeader( HttpHeaders.LOCATION );
		
		Preconditions.checkNotNull( locationOfCreatedResource );
		return locationOfCreatedResource;
	}
	
	@Override
	public final String createResourceAndGetAsXML(){
		final String uriForResourceCreation = this.createResource();
		final String createdResourceAsXML = this.genericRestTemplate.getResourceAsXML( uriForResourceCreation );
		
		return createdResourceAsXML;
	}
	
	// get

	@SuppressWarnings( "unchecked" )
	@Override
	public final T getResourceAsEntity( final String uriOfResource ){
		final String resourceAsXML = this.genericRestTemplate.getResourceAsXML( uriOfResource );
		
		return (T) this.xstream.fromXML( resourceAsXML );
	}
	
	// delete
	
	@Override
	public final Response delete( final String uriOfResource ){
		final Response response = this.securityComponent.givenAuthenticatedByBasicAuth().delete( uriOfResource );
		return response;
	}
	
	// template method
	
	protected abstract String getUri();
	
}
